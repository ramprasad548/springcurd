/*************************************************************************
* Copyright (C) 2015
* ACG
* All Rights Reserved 
*
* File: VENDORS_ENUM.java  
*************************************************************************
* Ver     Date          Name                      Description
* --- ------- ------------ -------------------------------------------------------------
* 1.0    Apr 29, 2015   Siva Nagaraju                   Initial version
*********************************************** **************************

/**
 * 
 */
package com.beingjavaguys.common.enums;

/**
 * @author Cherivi
 *
 */
public enum VENDOR_ERROR_CODE_ENUM {

	VIN_NOT_CARRIED_BY_CHROME("VIN_NOT_CARRIED_BY_CHROME","VIN is not supported by Chrome"),
	INVALID_VIN_CHECK_DIGIT("INVALID_VIN_CHECK_DIGIT","The 9th position check digit in the VIN is incorrect"),
	INVALID_VIN_CHARACTER("INVALID_VIN_CHARACTER","There is an invalid character in the VIN"),
	INVALID_VIN_LENGTH("INVALID_VIN_LENGTH","The VIN does not have the correct character length"),
	INVALID_SECURITY_TOKEN("INVALID_SECURITY_TOKEN","Security token is invalid"),
	CHROME_VENDOR_CONNECTION_ISSUE("CHROME_VENDOR_CONNECTION_ISSUE","Error while  connecting chrome vendor"),
	TU_VENDOR_CONNECTION_ISSUE("TU_VENDOR_CONNECTION_ISSUE","Error while  connecting TU vendor"),
	TU_VENDOR_MAX_NO_EXAM_ATTEMPTS("TU_VENDOR_MAX_NO_EXAM_ATTEMPTS_EXCEEDED","The maximum number of exam attempts has been exceeded"),
	TU_VENDOR_INSUFFICIENT_DATA("TU_VENDOR_INSUFFICIENT_DATA","There is insufficient data available to present an exam."),
	TU_VENDOR_FAILED_AUTHENTICATION("TU_VENDOR_FAILED_AUTHENTICATION","Consumer failed Authentication"),
	TU_VENDOR_ERROR_MSG("TU_VENDOR_ERROR_MSG","Something went wrong in TransUnion"),
	NADA_VENDOR_CONNECTION_ISSUE("NADA_VENDOR_CONNECTION_ISSUE","Error while  connecting nada vendor"),
	VOLTAGE_SECURE_VENDOR_CONNECTION_ISSUE("VOLTAGE_SECURE_VENDOR_CONNECTION_ISSUE","Error while  connecting voltage secure vendor"),
	CRIF_VENDOR_CONNECTION_ISSUE("CRIF_VENDOR_CONNECTION_ISSUE","Error while  connecting crif vendor"),
	SSL_CERTIFICATE_ISSUE("SSL_CERTIFICATE_ISSUE","Issue while connecting with certificate"),
	NO_TRUSTED_CERTIFICATE("NO_TRUSTED_CERTIFICATE","No trusted certificate found"),
	WEBSERVICE_EXCEPTION("WEBSERVICE_EXCEPTION","Webservice exception"),
	WEBSERVICE_IO_EXCEPTION("WEBSERVICE_IO_EXCEPTION","Webservice IO exception"),
	ERR1001("ERR1001","The ‘customerID’ tag is empty or non-existent in the incoming inquiry."),
	ERR1002("ERR1002","The inquiry XML doesn’t match with the inquiry schema."),
	VS02("VS02","If IDM cannot locate the decision strategy as identified by the fields customerId and programId."),
	VS03("VS03","If the programId field is not present on an inquiry."),
	VS04("VS04","If the applicants xml structure is not formatted per specification."),
	VS05("VS05","If no current applicant is identified in the inquiry."),
	VS06("VS06","Requested applicant data was not found in the applicants xml input."),
	VS09("VS09","If IDM’s database is corrupt and it has identified that multiple decision strategies are available for the given customerId and programId."),
	VS14("VS14","On a \"A\" transaction, if the corresponding \"I\" transaction was found but no relevant data was recovered."),
	VS15("VS15","On a \"A\" transaction, if more than one \"I\" transaction has been located in IDM’s database."),
	VS16("VS16","If IDM cannot parse the XML inquiry."),
	E001("E001","If a data source reports an error during the decision set and there are no other data sources to reroute to."),
	VS91("VS91","If IDM detects a system error during processing."),
	VS92("VS92","If IDM detects a system error during processing."),
	T9000("9000","If IDM detected that it could not process the inquiry in the amount of time it was allotted (a.k.a timeout)."),
	T9001("9001","If Envision detects an invalid system condition."),
	VEHICLE_NOT_FOUND_IN_NADA("VEHICLE_NOT_FOUND_IN_NADA","No Vehicle found"),
	
	T001("001","The transaction was abnormally terminated due to a system error."),
	T006("006","The transaction was abnormally terminated due to a system error."),
	T015("015","The system is not available at this time."),
	T021("021","The market area being accessed is out of service."),
	T027("027","The subject record being accessed is too long."),
	T029("029","Hardware failure exists on new subject file disk drive."),
	T031("031","The subject record being accessed is misformatted."),
	T033("033","Too many duplicate inquiries for the same file. This commonly occurs on test records and may also occur when the same subject file is requested repeatedly by the same subscriber."),
	T034("034","Subject record was updated after selection for this inquiry."),
	T035("035","The transaction was terminated due to an Individual Monitoring system error. For batch transactions, the subject name was received more than one time in the same batch."),
	T041("041","The transaction was abnormally terminated due to an internal DecisionPoint error."),
	T042("042","DecisionPoint model error."),
	T043("043","Invalid response from service server."),
	T050("050","Invalid or no response for desired product."),
	T051("051","Internal system error returned for desired product."),
	T052("052","Unable to connect to data provider."),
	T053("053","Request to data provider timed out."),
	T054("054","Invalid, incomplete, misformatted, or duplicate type of input data to data provider."),
	T055("055","Invalid request to service server."),
	T056("056","Response from data provider could not be created."),
	T057("057","Unable to connect to secondary data provider."),
	T081("081","DSBundle transaction timed out."),
	T082("082","RVP could not be processed in the amount of time available. Transaction timed out."),
	T090("090","The service requested is not available at this time."),
	T091("091","Internal system error."),
	T095("095","Unable to connect to server for service requested."),
	T096("096","Unable to connect to TransUnion Routing Facility."),
	T098("098","Fraud Detect connection failed."),
	T099("099","Undefined system error."),
	T101("101","FFI segment contains an invalid segment ID."),
	T102("102","Invalid input FFI message type."),
	T117("117","The length of the FFI is invalid."),
	T131("131","Number of CI01 segments greater than maximum allowed."),
	T132("132","Number of subject address elements greater than maximum allowed."),
	T133("133","Number of employment AD11/UA11 segments greater than maximum allowed."),
	T134("134","Number of AI01 segments greater than maximum allowed."),
	T135("135","Number of CC11 segments greater than maximum allowed."),
	T136("136","Number of EM11 segments greater than maximum allowed."),
	T137("137","Number of EU01 segments greater than maximum allowed."),
	T138("138","Number of FA11/UF11 segments greater than maximum allowed."),
	T139("139","Number of ID01 segments greater than maximum allowed."),
	T140("140","Number of primary NM11 segments greater than maximum allowed."),
	T142("142","Number of NM11 segments (also reported as) greater than maximum allowed."),
	T145("145","Number of PI11 segments greater than maximum allowed."),
	T146("146","Number of subject PN01 segments greater than maximum allowed."),
	T147("147","Number of employment PN01 segments greater than maximum allowed."),
	T148("148","Number of RA01 segments greater than maximum allowed."),
	T149("149","Number of RP01 segments greater than maximum allowed."),
	T151("151","Number of SH01 segments greater than maximum allowed."),
	T152("152","Number of TU4I segments greater than maximum allowed."),
	T155("155","No subject data found for subject header."),
	T158("158","Request service header not present in FFI."),
	T159("159","Service data found without service header."),
	T162("162","Name type field invalid on name (NM11) segment."),
	T172("172","Required segment missing or invalid."),
	T173("173","Invalid Trans ID, TU4N Trans ID is restricted."),
	T174("174","VN01 segment missing."),
	T175("175","Number of VN01 segments greater than maximum allowed."),
	T181("181","Number of RP02 segments greater than maximum allowed."),
	T182("182","Number of RP02 segments less than minimum required."),
	T201("201","Bureau market missing or invalid"),
	T203("203","Bureau submarket missing or invalid"),
	T205("205","Member code missing or invalid"),
	T209("209","Password missing/invalid."),
	T211("211","EP code is valid only for employment services."),
	T212("212","Missing or invalid Use Type or End User field(s)"),
	T213("213","Not a valid use type code for service/model requested."),
	T215("215","Invalid access code."),
	T216("216","Input use type code does not match use type code established for this subscriber code."),
	T220("220","Missing required additional identification information."),
	T221("221","ID Number missing or invalid."),
	T222("222","ID Type missing or invalid."),
	T223("223","Invalid or inactive vendor system user ID, password or other type of access control."),
	T241("241","DecisionPoint subscriber ID, subscriber password,agent ID, and/or agentpassword missing or invalid."),
	T299("299","Undefined error in a credit bureau control field or internal error."),
	T309("309","Member code is valid only for High Risk Fraud Search."),
	T323("323","Subscriber not authorized for service requested."),
	T324("324","Subscriber not authorized for loan type requested."),
	T325("325","Security error returned for desired product."),
	T381("381","Duplicate subscriber and service information provided."),
	T399("399","Undefined error in a processing option field."),
	T400("400","More name data is needed;check input for full name."),
	T401("401","Last name missing or invalid."),
	T403("403","First name missing or invalid."),
	T407("407","UNISSN was invoked, but the SSN is missing or invalid or a pocketbook SSN was entered."),
	T410("410","More data is needed, check input for address number or street type."),
	T411("411","Address number in current address house number is missing or invalid."),
	T413("413","Current address delivery address text is missing or invalid."),
	T415("415","Current address city name missing or invalid."),
	T417("417","Current address state code missing or invalid."),
	T419("419","Current address ZIP code missing or invalid."),
	T420("420","Invalid state or ZIP code."),
	T421("421","Address number in previous address house number missing or invalid."),
	T422("422","Invalid city or city/state combination."),
	T423("423","Previous address delivery address text missing or invalid."),
	T425("425","Previous address city name missing or invalid."),
	T427("427","Previous address state code missing or invalid."),
	T431("431","Employer name missing/invalid."),
	T435("435","Current address unit number invalid."),
	T436("436","The request does not contain a reference number."),
	T437("437","RVP cannot locate the decision strategy as identified by the Subscriber ID and Program ID."),
	T438("438","Program ID is missing."),
	T439("439","Requested applicant data was not found in the applicant's input."),
	T440("440","RVP's database is corrupt and there is more than one decision strategy for the Subscriber ID and Program ID specified."),
	T441("441","A C transaction found a corresponding I transaction, but it contained no relevant data."),
	T442("442","A C transaction could not determine the most recent I transaction."),
	T443("443","RVP cannot parse the inquiry in a synchronous socket transaction."),
	T447("447","Telephone number invalid."),
	T448("448","Phone area code invalid."),
	T449("449","Middle name invalid."),
	T451("451","Current address street direction invalid."),
	T452("452","State or street address is missing or invalid."),
	T453("453","Current address street type invalid."),
	T454("454","Birth date missing or invalid."),
	T455("455","Subject cross market invalid."),
	T456("456","Driver’s License and State Issued missing or invalid."),
	T457("457","Invalid format to be decoded for Creditor Contact Search."),
	T458("458","Invalid VIN (Vehicle Identification Number)."),
	T459("459","California AB-156—at least three pieces of identifying information must be present in input."),
	T461("461","Account Reporting Review:subscriber/inquiry link not established."),
	T466("466","Account Reporting Review: subscriber/inquiry link not active."),
	T467("467","Underwriting state is missing or invalid."),
	T472("472","Subscriber identifier missing or invalid."),
	T473("473","Subscriber identifier qualifier missing or invalid."),
	T474("474","Application missing or invalid."),
	T475("475","Digital Certificate missing or invalid."),
	T476("476","Net ID missing or invalid."),
	T477("477","Fraud Detect: insufficient inputto call fraud detect."),
	T478("478","Insufficient input."),
	T479("479","Invalid City/State combination."),
	T484("484","Input vendor data on VN01 segment does not match file vendor data."),
	T488("488","Perm ID not found/matched on Individual Monitoring Report/Consumer Disclosure."),
	T499("499","Undefined error in subject identification field or internal error."),
	T901("901","XML doc does not contain the requestInfo tag."),
	T902("902","XML doc does not contain the productCode tag."),
	T903("903","XML doc does not contain the productCode value."),
	T904("904","Invalid XML document."),
	
	WQ0("Q0","Exception Getting Quotes:  {additional info}"),
	WQ1("Q1","Invalid PartnerId provided."),
	WQ2("Q2","Invalid QuoteDate provided."),
	WQ3("Q3","Invalid StateProvinceCode provided."),
	WQ4("Q4","Invalid Unit Hashkey provided."),
	WQ5("Q5","Invalid UnitIdentificationNumber provided."),
	WQ6("Q6","Invalid Unit In-Service Date provided."),
	WQ7("Q7","Invalid Odometer provided."),
	WQ8("Q8","Invalid IsOriginalOwner provided."),
	WQ9("Q9","UnitIdentificationNumber or UnitHashKey must be provided."),
	W10("Q10","Invalid TaxingPostalCode provided."),
	W11("Q11","No void reason code provided."),
	W12("Q12","Invalid status provided: [status]"),
	W13("Q13","The contract number entered does not belong to the entered partner."),
	W14("Q14","The selected partner does not allow to void contract with reason code: [reasoncode]"),
	W15("Q15","The selected partner and its master partner does not allow to void contract with reason code:  [reasoncode]"),
	W16("Q16","The selected partner contains no master partner and does not allow to void contract with reason code:  [reasoncode]"),
	W100("Q100","No available products found."),
	W101("Q101","No products available for this state."),
	W102("Q102","Dealer # [DealerNumber], PartnerId [PartnerId], Sale date [quoteDate] have no products configured."),
	W103("Q103","Coverage is not available for this particular vehicle for this product."),
	W104("Q104","The vehicle exceeds the maximum allowed model years for this product."),
	W105("Q105","The vehicle exceeds the maximum allowed mileage for this product."),
	W107("Q107","When Vehicle Purchase Type is Lease or LeaseAPR, Lease Term must be set."),
	W1001("Q1001","Warning:  The product being quoted expires in {x} days, please requote after this date."),	
	WC0("WC0","Exception Performing Enrollment:  {additional info}"),
	WC1("WC1","Invalid Contract Price provided."),
	WC2("WC2","Invalid Rate Id provided."),
	WC3("WC3","Invalid PartnerId provided."),
	WC4("WC4","Invalid OriginalQuoteDate provided."),
	WC5("WC5","Invalid Unit Hashkey provided."),
	WC6("WC6","Invalid UnitIdentificationNumber provided."),
	WC7("WC7","Invalid Unit In-Service Date provided."),
	WC8("WC8","Invalid Contract Effective Date provided."),
	WC9("WC9","Invalid Odometer provided."), 
	WC10("WC10","Invalid WithForms provided."),
	WC11("WC11","Invalid StateProvinceCode provided."),
	WC12("WC12","Invalid PostalCode provided."), 	
	WC13("WC13","Invalid Email Address provided."), 
	WC14("WC14","One or more Contractees are required."),
	WC15("WC15","Invalid IsOriginalOwner provided."),
	WC16("WC16","There must be one primary ContracteeDTO."),
	WC17("WC17","There must be one primary Address."),
	WC18("WC18","There must be one primary Phone number"),
	WC19("WC19","Duplicate request for PerformContractEnrollment not allowed - existing Contract# (xxxxxxxx)"),
	WC20("WC20","Loan Number is required when Contract is financed."),
	WC21("WC21","Invalid Customer Number provided."),
	WC22("WC22","Invalid Country, State combination provided."),
	WC23("WC23","Invalid customer method of payment provided."),
	WC24("WC24","Middle Initial length is greater than 2 characters."),
	WC25("WC25","Invalid character(s) or more than one alphabet provided for middle initial."),
	WC26("WC26","Invalid character(s) provided for middle initial."),
	WC27("WC27","Contract retail price is greater than maximum retail price."),
	WC28("WC28","Contract retail price is less than minimum retail price."),
	WF0("F0","General Exception."),
	WF1("F1","Invalid Form Number provided."),
	WF2("F2","Form Number exists but Form is not currently active."),
	WF3("F3","More than one form with the same number found."),
	WF4("F4","Invalid PartnerId provided."),
	WV1("V1","Primary customer is required."),
	WV2("V2","Customer First name is required."),
	WV3("V3","Customer Last name is required."),
	WV4("V4","Customer Email address is invalid."),
	WV10("V10","Address is required."),
	WV11("V11","Street Address is required."),
	WV12("V12","City is required."),
	WV13("V13","StateProvinceCode is required."),
	WV14("V14","Country Code is required."),
	WV15("V15","Postal Code is required."),
	WV16("V16","Address Type is required."),
	WV20("V20","Phone is required."),
	WV21("V21","Phone Number is required."),
	WV22("V22","Phone Type is required."),
	WV101("V101","Unit is required."),
	WV102("V102","Unit Type is required."),
	WV103("V103","Unit Type is invalid."),
	WV104("V104","UnitHashKey is not valid."),
	WV105("V105","In-Service Date cannot be a future date. Please enter a valid date."), 
	WV106("V106","Invalid Unit In-Service date."), 
	WV120("V120","Auto is not valid."),
	WV121("V121","Auto VIN is required."),
	WV122("V122","Auto Code is required."),
	WV123("V123","Auto Warranty Months is required."),
	WV124("V124","Auto Warranty Miles is required."),
	WV125("V125","UnitIdentificationNumber is invalid."),
	WV200("V200","Lender  is not valid."),
	WV201("V201","Lender Name is not valid."),
	WV202("V202","Lender Address is not valid."),
	WV203("V203","Loan Number is not valid."),
	WV300("V300","Unit details incomplete."),
	WV301("V301","Invalid date found for {x}."),
	WP1("P1","Payee Name is required"),
	WP2("P2","Billing Address is required."),
	WP3("P3","Billing Street Address is required."),
	WP4("P4","Billing City is required."),
	WP5("P5","Billing StateProvinceCode is required."),
	WP6("P6","Billing Country code is invalid."),
	WP7("P7","Billing Country Code is required."),
	WP8("P8","Billing Postal Code is required."),
	WP9("P9","Billing Address Type is required."),  
	WP10("P10","Routing Number is Invalid."), 
	WP11("P11","Routing Number is required."), 
	WP12("P12","Credit Card Number is invalid."), 
	WP13("P13","Credit Card Number is required."), 
	WP14("P14","Credit Card Type is invalid."),
	WP15("P15","Credit Card Type is required."),
	WP16("P16","Expiration Month is invalid."),
	WP17("P17","Expiration Month is required."),
	WP18("P18","Expiration Year is invalid."),
	WP19("P19","Expiration Year is required."),
	WP20("P20","EffectiveThru date is invalid."),
	WP21("P21","Effective Thru date is required."),
	WP22("P22","Card Security Code is required."),
	WP23("P23","Card Security Code is invalid."),
	WP24("P24","Payment Term is Invalid."),
	WP25("P25","Payment Term is Required."),
	WP26("P26","Payment Day is Required."),
	WP27("P27","Payment Day is invalid."),
	WP28("P28","CustomerMethodOfPayment Required."),
	WP29("P29","CustomerMethodOfPayment is invalid."),
	WP30("P30","PaymentPlanOption is required."),
	WP31("P31","Monthly Retail Amount is required."),
	WP32("P32","Monthly Retail Amount is invalid."),
	WP33("P33","Monthly Sales Tax is required."),
	WP34("P34","Monthly Sales Tax is invalid."),
	WP35("P35","Total Monthly Payment Amount is invalid."),
	WP36("P36","Total Monthly Payment Amount is required.");
	
	private String errorCode;
	private String desc;
	
	VENDOR_ERROR_CODE_ENUM(String errorCode,String desc){		    
		    this.errorCode=errorCode;
			this.desc = desc;
		}

		/**
		 * @return the desc
		 */
		public String getDesc() {
			return desc;
		}

		/**
		 * @return the errorCode
		 */
		public String getErrorCode() {
			return errorCode;
		}
	 
	public static VENDOR_ERROR_CODE_ENUM getDescByErrorCode(String errorCode) {
	    for(VENDOR_ERROR_CODE_ENUM e : values()) {
	        if(e.getErrorCode().equals(errorCode)) return e;
	    }
	    return null;
	 }
	
	public static VENDOR_ERROR_CODE_ENUM getErrorCodeByDesc(String errorDesc) {
	    for(VENDOR_ERROR_CODE_ENUM e : values()) {
	        if(e.getDesc().equals(errorDesc)) return e;
	    }
	    return VENDOR_ERROR_CODE_ENUM.TU_VENDOR_ERROR_MSG;
	 }
}